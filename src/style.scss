// Copyright (c) 2024 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.

// ---------------------------------------------------------------------

/* stylelint-disable at-rule-empty-line-before, custom-property-pattern, declaration-empty-line-before, order/properties-order, color-function-notation, max-nesting-depth,
   selector-class-pattern, scss/selector-no-redundant-nesting-selector, declaration-block-no-duplicate-properties, scss/double-slash-comment-empty-line-before,
   scss/selector-nest-combinators, rule-empty-line-before,  no-descending-specificity, no-duplicate-selectors */

// Import Auro tokens
@import "./../node_modules/@aurodesignsystem/design-tokens/dist/tokens/SCSSVariables";
@import "./../node_modules/@aurodesignsystem/design-tokens/dist/tokens/SassCustomProperties";

@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/breakpoints";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/core";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/animation";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/headings";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/utilityClasses/displayProperties";

$auro-spacing-types: stack;
$auro-spacing-options: none;
@import "./../node_modules/@aurodesignsystem/design-tokens/dist/tokens/SCSSVariableMap";
@import "./../node_modules/@aurodesignsystem/webcorestylesheets/src/utilityMixins/spacingUtility";

// container styles - defines the look of the outer custom component
:host {
  --insetPaddingXl: 0 var(--ds-size-400, $ds-size-400) var(--ds-size-400, $ds-size-400) var(--ds-size-400, $ds-size-400);
  --insetPaddingXxl: 0 var(--ds-size-600, $ds-size-600) var(--ds-size-600, $ds-size-600) var(--ds-size-600, $ds-size-600);
  --insetPaddingXxxl: 0 var(--ds-size-800, $ds-size-800) var(--ds-size-800, $ds-size-800) var(--ds-size-800, $ds-size-800);
}

// container shape styles
.drawerOverlay {
  position: fixed;
  z-index: -1;
  bottom: 0;
  left: 0;

  width: 100%;
  height: 100%;

  // Open modifier for default drawer state
  &--open {
    z-index: var(--ds-depth-overlay);

    transition: background 0.3s cubic-bezier(0.4, 0, 0.2, 0);

    background: rgba(0, 0, 0, 0.2);
  }

  // Modal modifier for modal/blocking state
  &--modal {
    z-index: var(--ds-depth-overlay);

    transition: background 0.3s cubic-bezier(0.4, 0, 0.5, 0);

    background: rgba(0, 0, 0, 0.5);
  }
}

// Default selector setting mobile-first specs
.drawer {
  position: fixed;
  z-index: -1;

  top: 0;
  right: 0;

  display: block;
  visibility: hidden;
  overflow: visible;

  max-width: 90%;
  height: 100%;
  
  padding: var(--insetPaddingXl);

  transform: translateX(100%);

  opacity: 0;
  border: 0;
  background: var(--ds-color-background-lightest, $ds-color-background-lightest);
  color: var(--ds-color-text-primary-default, $ds-color-text-primary-default);

  // baseline drawer UI / mobile-first

  @include auro_transition(all, 0.3s, ease-in-out);
  // 1024px breakpoint / large drawer size is default
  @include auro_breakpoint--md {
    box-shadow: 0 10px 20px 0 rgba(0,0,0,0.12), 0 1px 10px 0 rgba(0,0,0,0.1);
  }

  @include auro_breakpoint--lg {
    padding: var(--insetPaddingXxxl);
  }

  // open modifier
  &--open {
    z-index: var(--ds-depth-modal, $ds-depth-modal);

    visibility: visible;

    transform: translateX(0%);

    opacity: 1;
  }

  // footer slot
  &-footer {
    padding-top: var(--ds-size-400, $ds-size-400);

    @include auro_breakpoint--md {
      ::slotted(*) {
        display: flex;
        justify-content: flex-end;
      }
    }
  }
}

::slotted([slot="content"]) {
  position: relative;
}

:host([left]) {
  .drawer {
    right: unset;
    left: 0;

    transform: translateX(-100%);

    // open modifier
    &--open {
      transform: translateX(0%);
    }
  }
}

.drawer-header {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  padding-top: var(--ds-size-800, $ds-size-800);

  & svg {
    fill: var(--ds-color-text-secondary-default, $ds-color-text-secondary-default);
  }

  &--action {
    margin: 0;
    padding: 0;

    border: none;
    border: 2px solid transparent;
    border-radius: var(--ds-border-radius, $ds-border-radius);
    background-color: transparent;

    &:hover {
      cursor: pointer;
    }
  }
}

::slotted([slot="content"]) {
  position: relative;
}

// sets dynamic placement of close-X based on padding specs
:host([unformatted]) {
  .drawer-header--action {
    position: absolute;
    top: var(--ds-size-400, $ds-size-400);
    right: var(--ds-size-400, $ds-size-400);

    @include auro_breakpoint--md {
      top: var(--ds-size-800, $ds-size-800);
      right: var(--ds-size-800, $ds-size-800);
    }
  }

  .drawer {
    padding: 0;
  }
}

:host([unformatted][onDark]) {
  .drawer-header--action {
    color: var(--ds-color-base-white, $ds-color-base-white);
  }
}

:host([sm]) {
  @include auro_breakpoint--md {
    .drawer {
      max-width: 40%;
    }
  }
  @include auro_breakpoint--lg {
    .drawer {
      max-width: 740px;
    }
  }
}

:host([md]) {
  @include auro_breakpoint--md {
    .drawer {
      max-width: 70%;
    }
  }
  @include auro_breakpoint--lg {
    .drawer {
      max-width: 986px;
    }
  }
}

:host([sm][lg]),
:host([md][lg]) {
  @include auro_breakpoint--md {
    .drawer {
      max-height: 100%;
    }
  }
  .drawer {
    max-height: 100%;
  }
}
