import { css, LitElement } from 'lit';
import { html } from 'lit/static-html.js';
import { classMap } from 'lit/directives/class-map.js';
import AuroLibraryRuntimeUtils from '@aurodesignsystem/auro-library/scripts/utils/runtimeUtils.mjs';
import { AuroDependencyVersioning } from '@aurodesignsystem/auro-library/scripts/runtime/dependencyTagVersioning.mjs';
import { AuroButton } from '@aurodesignsystem/auro-button/src/auro-button.js';
import { AuroIcon } from '@aurodesignsystem/auro-icon/src/auro-icon.js';

function initBasicExample() {
  const buttons = [document.querySelector('#openBasic'), document.querySelector('#closeBasic')];
  const drawer = document.querySelector('#defaultDrawer');

  buttons.forEach((button) => {
    button.addEventListener('click', () => {
      if (drawer.hasAttribute('open')) {
        drawer.removeAttribute('open');
      } else {
        drawer.setAttribute('open', true);
      }
    });
  });
}

function initAccessibilityExample() {
  const button = document.querySelector('#openAccessibility');
  const drawer = document.querySelector('#unformattedMdDrawer');

  button.addEventListener('click', () => {
    if (drawer.hasAttribute('open')) {
      drawer.removeAttribute('open');
    } else {
      drawer.setAttribute('open', true);
    }
  });
}

function initDecoupledExample() {
  const smLgButtons = [document.querySelector('#openSmLg'), document.querySelector('#closeSmLg')];
  const smLgDrawer = document.querySelector('#smLgDrawer');

  const mdLgButtons = [document.querySelector('#openMdLg'), document.querySelector('#closeMdLg')];
  const mdLgDrawer = document.querySelector('#mdLgDrawer');

  smLgButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (smLgDrawer.hasAttribute('open')) {
        smLgDrawer.removeAttribute('open');
      } else {
        smLgDrawer.setAttribute('open', true);
      }
    });
  });

  mdLgButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (mdLgDrawer.hasAttribute('open')) {
        mdLgDrawer.removeAttribute('open');
      } else {
        mdLgDrawer.setAttribute('open', true);
      }
    });
  });
}

function initEditCloseButtonExample() {
  const button = document.querySelector('#openEditDrawer');
  const drawer = document.querySelector('#unformattedCustomMdDrawer');

  button.addEventListener('click', () => {
    if (drawer.hasAttribute('open')) {
      drawer.removeAttribute('open');
    } else {
      drawer.setAttribute('open', true);
    }
  });
}

function initModalExample() {
  const defaultButtons = [document.querySelector('#openDefaultModal'), document.querySelector('#closeDefaultModal')];
  const defaultDrawer = document.querySelector('#defaultModalDrawer');

  const mediumButtons = [document.querySelector('#openMediumModal'), document.querySelector('#closeMediumModal')];
  const mediumDrawer = document.querySelector('#mediumModalDrawer');

  const smallButtons = [document.querySelector('#openSmallModal'), document.querySelector('#closeSmallModal')];
  const smallDrawer = document.querySelector('#smallModalDrawer');

  defaultButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (defaultDrawer.hasAttribute('open')) {
        defaultDrawer.removeAttribute('open');
      } else {
        defaultDrawer.setAttribute('open', true);
      }
    });
  });

  mediumButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (mediumDrawer.hasAttribute('open')) {
        mediumDrawer.removeAttribute('open');
      } else {
        mediumDrawer.setAttribute('open', true);
      }
    });
  });

  smallButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (smallDrawer.hasAttribute('open')) {
        smallDrawer.removeAttribute('open');
      } else {
        smallDrawer.setAttribute('open', true);
      }
    });
  });
}

function initPopoverAndDropdownExample() {
  const buttons = [document.querySelector('#openPopAndDrop'), document.querySelector('#closePopAndDrop')];
  const drawer = document.querySelector('#popover-drawer');

  buttons.forEach((button) => {
    button.addEventListener('click', () => {
      if (drawer.hasAttribute('open')) {
        drawer.removeAttribute('open');
      } else {
        drawer.setAttribute('open', true);
      }
    });
  });
}

function initSizeOptionsExample() {
  const defaultButtons = [document.querySelector('#openDefaultSize'), document.querySelector('#closeDefaultSize')];
  const defaultDrawer = document.querySelector('#defaultSizeDrawer');

  const mediumButtons = [document.querySelector('#openMediumSize'), document.querySelector('#closeMediumSize')];
  const mediumDrawer = document.querySelector('#mediumSizeDrawer');

  const smallButtons = [document.querySelector('#openSmallSize'), document.querySelector('#closeSmallSize')];
  const smallDrawer = document.querySelector('#smallSizeDrawer');

  defaultButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (defaultDrawer.hasAttribute('open')) {
        defaultDrawer.removeAttribute('open');
      } else {
        defaultDrawer.setAttribute('open', true);
      }
    });
  });

  mediumButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (mediumDrawer.hasAttribute('open')) {
        mediumDrawer.removeAttribute('open');
      } else {
        mediumDrawer.setAttribute('open', true);
      }
    });
  });

  smallButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (smallDrawer.hasAttribute('open')) {
        smallDrawer.removeAttribute('open');
      } else {
        smallDrawer.setAttribute('open', true);
      }
    });
  });
}

function initSlideOptionsExample() {
  const defaultButtons = [document.querySelector('#openDefaultSlide'), document.querySelector('#closeDefaultSlide')];
  const defaultDrawer = document.querySelector('#defaultSlideDrawer');

  const leftButtons = [document.querySelector('#openLeftSlide'), document.querySelector('#closeLeftSlide')];
  const leftDrawer = document.querySelector('#leftSlideDrawer');

  defaultButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (defaultDrawer.hasAttribute('open')) {
        defaultDrawer.removeAttribute('open');
      } else {
        defaultDrawer.setAttribute('open', true);
      }
    });
  });

  leftButtons.forEach((button) => {
    button.addEventListener('click', () => {
      if (leftDrawer.hasAttribute('open')) {
        leftDrawer.removeAttribute('open');
      } else {
        leftDrawer.setAttribute('open', true);
      }
    });
  });
}

var styleCss = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.heading{margin:1.75rem 0;letter-spacing:var(--ds-text-heading-default-spacing, -0.2px);font-weight:var(--ds-text-heading-default-weight, 500)}.heading--display{margin-top:0;font-size:var(--ds-text-heading-display-size-breakpoint-sm, 2.75rem);font-weight:var(--ds-text-heading-display-weight, 100);line-height:var(--ds-text-heading-display-height-breakpoint-sm, 3.375rem)}@media screen and (min-width: 768px){.heading--display{font-size:var(--ds-text-heading-display-size-breakpoint-md, 3rem);line-height:var(--ds-text-heading-display-height-breakpoint-md, 3.75rem)}}@media screen and (min-width: 1024px){.heading--display{font-size:var(--ds-text-heading-display-size-breakpoint-lg, 3.5rem);line-height:var(--ds-text-heading-display-height-breakpoint-lg, 4.25rem)}}.heading--800{font-size:var(--ds-text-heading-800-size-breakpoint-sm, 2rem);font-weight:var(--ds-text-heading-800-weight, 500);line-height:var(--ds-text-heading-800-height-breakpoint-sm, 2.375rem)}@media screen and (min-width: 768px){.heading--800{font-size:var(--ds-text-heading-800-size-breakpoint-md, 2.25rem);line-height:var(--ds-text-heading-800-height-breakpoint-md, 2.625rem)}}@media screen and (min-width: 1024px){.heading--800{font-size:var(--ds-text-heading-800-size-breakpoint-lg, 2.5rem);line-height:var(--ds-text-heading-800-height-breakpoint-lg, 3rem)}}.heading--700{font-size:var(--ds-text-heading-700-size-breakpoint-sm, 1.75rem);font-weight:var(--ds-text-heading-700-weight, 500);line-height:var(--ds-text-heading-700-height-breakpoint-sm, 2.125rem)}@media screen and (min-width: 768px){.heading--700{font-size:var(--ds-text-heading-700-size-breakpoint-md, 2rem);line-height:var(--ds-text-heading-700-height-breakpoint-md, 2.375rem)}}@media screen and (min-width: 1024px){.heading--700{font-size:var(--ds-text-heading-700-size-breakpoint-lg, 2.25rem);line-height:var(--ds-text-heading-700-height-breakpoint-lg, 2.75rem)}}.heading--600{margin:1rem 0;font-size:var(--ds-text-heading-600-size-breakpoint-sm, 1.625rem);font-weight:var(--ds-text-heading-600-weight, 300);line-height:var(--ds-text-heading-600-height-breakpoint-sm, 1.875rem)}@media screen and (min-width: 768px){.heading--600{font-size:var(--ds-text-heading-600-size-breakpoint-md, 1.75rem);line-height:var(--ds-text-heading-600-height-breakpoint-md, 2.125rem)}}@media screen and (min-width: 1024px){.heading--600{font-size:var(--ds-text-heading-600-size-breakpoint-lg, 1.75rem);line-height:var(--ds-text-heading-600-height-breakpoint-lg, 2.25rem)}}.heading--500{margin:1rem 0;font-size:var(--ds-text-heading-500-size-breakpoint-sm, 1.375rem);font-weight:var(--ds-text-heading-500-weight, 300);line-height:var(--ds-text-heading-500-height-breakpoint-sm, 1.625rem)}@media screen and (min-width: 768px){.heading--500{font-size:var(--ds-text-heading-500-size-breakpoint-md, 1.5rem);line-height:var(--ds-text-heading-500-height-breakpoint-md, 1.875rem)}}@media screen and (min-width: 1024px){.heading--500{font-size:var(--ds-text-heading-500-size-breakpoint-lg, 1.5rem);line-height:var(--ds-text-heading-500-height-breakpoint-lg, 2rem)}}.heading--400{margin:.75rem 0;font-size:var(--ds-text-heading-400-size, 1.25rem);font-weight:var(--ds-text-heading-400-weight, 300);line-height:var(--ds-text-heading-400-height, 1.625rem)}.heading--300{margin:.75rem 0;font-size:var(--ds-text-heading-300-size, 1.125rem);font-weight:var(--ds-text-heading-300-weight, 300);line-height:var(--ds-text-heading-300-height, 1.625rem)}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}.util_inlinePaddingNone--left{padding-left:0}.util_inlinePaddingNone--right{padding-right:0}.util_inlineMarginNone--left{margin-left:0}.util_inlineMarginNone--right{margin-right:0}.util_inlinePadding25--left{padding-left:.125rem}.util_inlinePadding25--right{padding-right:.125rem}.util_inlineMargin25--left{margin-left:.125rem}.util_inlineMargin25--right{margin-right:.125rem}.util_inlinePadding50--left{padding-left:.25rem}.util_inlinePadding50--right{padding-right:.25rem}.util_inlineMargin50--left{margin-left:.25rem}.util_inlineMargin50--right{margin-right:.25rem}.util_inlinePadding100--left{padding-left:.5rem}.util_inlinePadding100--right{padding-right:.5rem}.util_inlineMargin100--left{margin-left:.5rem}.util_inlineMargin100--right{margin-right:.5rem}.util_inlinePadding200--left{padding-left:1rem}.util_inlinePadding200--right{padding-right:1rem}.util_inlineMargin200--left{margin-left:1rem}.util_inlineMargin200--right{margin-right:1rem}.util_inlinePadding300--left{padding-left:1.5rem}.util_inlinePadding300--right{padding-right:1.5rem}.util_inlineMargin300--left{margin-left:1.5rem}.util_inlineMargin300--right{margin-right:1.5rem}.util_inlinePadding400--left{padding-left:2rem}.util_inlinePadding400--right{padding-right:2rem}.util_inlineMargin400--left{margin-left:2rem}.util_inlineMargin400--right{margin-right:2rem}.util_inlinePadding500--left{padding-left:2.5rem}.util_inlinePadding500--right{padding-right:2.5rem}.util_inlineMargin500--left{margin-left:2.5rem}.util_inlineMargin500--right{margin-right:2.5rem}.util_inlinePadding600--left{padding-left:3rem}.util_inlinePadding600--right{padding-right:3rem}.util_inlineMargin600--left{margin-left:3rem}.util_inlineMargin600--right{margin-right:3rem}.util_inlinePadding700--left{padding-left:3.5rem}.util_inlinePadding700--right{padding-right:3.5rem}.util_inlineMargin700--left{margin-left:3.5rem}.util_inlineMargin700--right{margin-right:3.5rem}.util_inlinePadding800--left{padding-left:4rem}.util_inlinePadding800--right{padding-right:4rem}.util_inlineMargin800--left{margin-left:4rem}.util_inlineMargin800--right{margin-right:4rem}.util_inlinePadding900--left{padding-left:4.5rem}.util_inlinePadding900--right{padding-right:4.5rem}.util_inlineMargin900--left{margin-left:4.5rem}.util_inlineMargin900--right{margin-right:4.5rem}.util_inlinePadding1000--left{padding-left:5rem}.util_inlinePadding1000--right{padding-right:5rem}.util_inlineMargin1000--left{margin-left:5rem}.util_inlineMargin1000--right{margin-right:5rem}.util_stackPaddingNone--top{padding-top:0}.util_stackPaddingNone--bottom{padding-bottom:0}.util_stackMarginNone--top{margin-top:0}.util_stackMarginNone--bottom{margin-bottom:0}.util_stackPadding25--top{padding-top:.125rem}.util_stackPadding25--bottom{padding-bottom:.125rem}.util_stackMargin25--top{margin-top:.125rem}.util_stackMargin25--bottom{margin-bottom:.125rem}.util_stackPadding50--top{padding-top:.25rem}.util_stackPadding50--bottom{padding-bottom:.25rem}.util_stackMargin50--top{margin-top:.25rem}.util_stackMargin50--bottom{margin-bottom:.25rem}.util_stackPadding100--top{padding-top:.5rem}.util_stackPadding100--bottom{padding-bottom:.5rem}.util_stackMargin100--top{margin-top:.5rem}.util_stackMargin100--bottom{margin-bottom:.5rem}.util_stackPadding200--top{padding-top:1rem}.util_stackPadding200--bottom{padding-bottom:1rem}.util_stackMargin200--top{margin-top:1rem}.util_stackMargin200--bottom{margin-bottom:1rem}.util_stackPadding300--top{padding-top:1.5rem}.util_stackPadding300--bottom{padding-bottom:1.5rem}.util_stackMargin300--top{margin-top:1.5rem}.util_stackMargin300--bottom{margin-bottom:1.5rem}.util_stackPadding400--top{padding-top:2rem}.util_stackPadding400--bottom{padding-bottom:2rem}.util_stackMargin400--top{margin-top:2rem}.util_stackMargin400--bottom{margin-bottom:2rem}.util_stackPadding500--top{padding-top:2.5rem}.util_stackPadding500--bottom{padding-bottom:2.5rem}.util_stackMargin500--top{margin-top:2.5rem}.util_stackMargin500--bottom{margin-bottom:2.5rem}.util_stackPadding600--top{padding-top:3rem}.util_stackPadding600--bottom{padding-bottom:3rem}.util_stackMargin600--top{margin-top:3rem}.util_stackMargin600--bottom{margin-bottom:3rem}.util_stackPadding700--top{padding-top:3.5rem}.util_stackPadding700--bottom{padding-bottom:3.5rem}.util_stackMargin700--top{margin-top:3.5rem}.util_stackMargin700--bottom{margin-bottom:3.5rem}.util_stackPadding800--top{padding-top:4rem}.util_stackPadding800--bottom{padding-bottom:4rem}.util_stackMargin800--top{margin-top:4rem}.util_stackMargin800--bottom{margin-bottom:4rem}.util_stackPadding900--top{padding-top:4.5rem}.util_stackPadding900--bottom{padding-bottom:4.5rem}.util_stackMargin900--top{margin-top:4.5rem}.util_stackMargin900--bottom{margin-bottom:4.5rem}.util_stackPadding1000--top{padding-top:5rem}.util_stackPadding1000--bottom{padding-bottom:5rem}.util_stackMargin1000--top{margin-top:5rem}.util_stackMargin1000--bottom{margin-bottom:5rem}:host{--insetPaddingXl: 0 var(--ds-size-400, $ds-size-400) var(--ds-size-400, $ds-size-400) var(--ds-size-400, $ds-size-400);--insetPaddingXxl: 0 var(--ds-size-600, $ds-size-600) var(--ds-size-600, $ds-size-600) var(--ds-size-600, $ds-size-600);--insetPaddingXxxl: 0 var(--ds-size-800, $ds-size-800) var(--ds-size-800, $ds-size-800) var(--ds-size-800, $ds-size-800)}[auro-icon]{height:var(--ds-size-300, 1.5rem);width:var(--ds-size-300, 1.5rem)}.drawerOverlay{position:fixed;z-index:-1;bottom:0;left:0;width:100%;height:100%}.drawerOverlay--open{z-index:var(--ds-depth-overlay);transition:background .3s cubic-bezier(0.4, 0, 0.2, 0)}.drawerOverlay--modal{z-index:var(--ds-depth-overlay);transition:background .3s cubic-bezier(0.4, 0, 0.5, 0)}.drawer{position:fixed;z-index:-1;top:0;right:0;display:block;visibility:hidden;overflow:scroll;overscroll-behavior:contain;max-width:90%;height:100%;padding:var(--insetPaddingXl);transform:translateX(100%);opacity:0;border:0;transition:all .3s ease-in-out}@media screen and (min-width: 1024px){.drawer{padding:var(--insetPaddingXxxl)}}.drawer--open{z-index:var(--ds-depth-modal, 400);visibility:visible;transform:translateX(0%);opacity:1}.drawer-footer{padding-top:var(--ds-size-400, 2rem)}@media screen and (min-width: 768px){.drawer-footer ::slotted(*){display:flex;justify-content:flex-end}}::slotted([slot=content]){position:relative}:host([left]) .drawer{right:unset;left:0;transform:translateX(-100%)}:host([left]) .drawer--open{transform:translateX(0%)}.drawer-header{display:flex;align-items:flex-start;justify-content:space-between;padding-top:var(--ds-size-800, 4rem)}.drawer-header--action{margin:0;padding:0}.drawer-header--action:hover{cursor:pointer}::slotted([slot=content]){position:relative}:host([unformatted]) .drawer-header--action{position:absolute;top:var(--ds-size-400, 2rem);right:var(--ds-size-400, 2rem)}@media screen and (min-width: 768px){:host([unformatted]) .drawer-header--action{top:var(--ds-size-800, 4rem);right:var(--ds-size-800, 4rem)}}:host([unformatted]) .drawer{padding:0}@media screen and (min-width: 768px){:host([sm]) .drawer{max-width:40%}}@media screen and (min-width: 1024px){:host([sm]) .drawer{max-width:740px}}@media screen and (min-width: 768px){:host([md]) .drawer{max-width:70%}}@media screen and (min-width: 1024px){:host([md]) .drawer{max-width:986px}}@media screen and (min-width: 768px){:host([sm][lg]) .drawer,:host([md][lg]) .drawer{max-height:100%}}:host([sm][lg]) .drawer,:host([md][lg]) .drawer{max-height:100%}`;

var styleUnformattedCss = css`[unformatted] .unformattedWrapper{padding:var(--ds-size-400, 2rem)}@media screen and (min-width: 768px){[unformatted] .unformattedWrapper{padding:var(--ds-size-800, 4rem);padding-top:var(--ds-size-400, 2rem)}}`;

var colorCss = css`.drawerOverlay--open{background:var(--ds-auro-drawer-overlay-open-background-color)}.drawerOverlay--modal{background:var(--ds-auro-drawer-overlay-modal-background-color)}.drawer{background:var(--ds-auro-drawer-container-color);color:var(--ds-auro-drawer-text-color)}@media screen and (min-width: 768px){.drawer{box-shadow:0 10px 20px 0 var(--ds-auro-drawer-boxshadow-color-one),0 1px 10px 0 var(--ds-auro-drawer-boxshadow-color-two)}}.drawer-header--action{border:2px solid transparent;border-radius:var(--ds-border-radius, 0.375rem);background-color:transparent}`;

var tokensCss = css`:host{--ds-auro-drawer-container-color: var(--ds-color-container-primary-default, #ffffff);--ds-auro-drawer-boxshadow-color: var(--ds-elevation-300, 0px 0px 15px rgba(0, 0, 0, 0.2));--ds-auro-drawer-overlay-modal-background-color: var(--ds-color-background-scrimmed-default, rgba(0, 0, 0, 0.5));--ds-auro-drawer-overlay-open-background-color: var(--ds-color-background-scrimmed-default, rgba(0, 0, 0, 0.5));--ds-auro-drawer-text-color: var(--ds-color-text-primary-default, #2a2a2a)}`;

var buttonVersion = '8.1.0';

var iconVersion = '5.0.2';

// Copyright (c) 2024 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


const ESCAPE_KEYCODE = 27,
  FOCUS_TIMEOUT = 50;

// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * auro-drawer appear above the page and require the user's attention.
 *
 * @attr {Boolean} modal - Modal drawer restricts the user to take an action (no default close actions)
 * @attr {Boolean} unformatted - Unformatted drawer window, edge-to-edge fill for content
 * @attr {Boolean} sm - Sets drawer box to small style. Adding both sm and lg will set the drawer to sm for desktop and lg for mobile.
 * @attr {Boolean} md - Sets drawer box to medium style. Adding both md and lg will set the drawer to md for desktop and lg for mobile.
 * @attr {Boolean} onDark - Sets close icon to white for dark backgrounds
 * @attr {Boolean} open - Sets state of drawer to open
 * @prop {HTMLElement} triggerElement - The element to focus when the drawer is closed. If not set, defaults to the value of document.activeElement when the drawer is opened.
 * @slot header - Text to display as the header of the modal
 * @slot content - Injects content into the body of the modal
 * @slot footer - Used for action options, e.g. buttons
 * @function toggleViewable - toggles the 'open' property on the element
 * @event toggle - Event fires when the element is closed
 * @csspart close-button - adjust position of the close X icon in the drawer window
 * @csspart drawer-overlay - apply CSS on the overlay of the drawer
 * @csspart drawer - apply CSS to the entire drawer
 * @csspart drawer-header - apply CSS to the header of the drawer
 * @csspart drawer-content - apply CSS to the content of the drawer
 * @csspart drawer-footer - apply CSS to the footer of the drawer
 */

class ComponentBase extends LitElement {
  constructor() {
    super();

    this.modal = false;
    this.unformatted = false;

    const versioning = new AuroDependencyVersioning();

    /**
     * @private
     */
    this.buttonTag = versioning.generateTag('auro-button', buttonVersion, AuroButton);

    /**
     * @private
     */
    this.iconTag = versioning.generateTag('auro-icon', iconVersion, AuroIcon);

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();
  }

  static get properties() {
    return {
      modal: { type: Boolean },
      unformatted: {
        type: Boolean,
        reflect: true
      },
      open: {
        type: Boolean,
        reflect: true
      },
      triggerElement: {
        attribute: false
      }
    };
  }

  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    this.runtimeUtils.handleComponentTagRename(this, 'auro-drawer');

    const slot = this.shadowRoot.querySelector("#footer"),
      slotWrapper = this.shadowRoot.querySelector("#footerWrapper");

    this.drawer = this.shadowRoot.getElementById('drawer');

    if (!this.unformatted && slot.assignedNodes().length === 0) {
      slotWrapper.classList.remove("drawer-footer");
    }
  }

  /**
   * LitElement lifecycle method. Called after the DOM has been updated.
   * @param {Map<string, any>} changedProperties - Keys are the names of changed properties, values are the corresponding previous values.
   * @returns {void}
   */
  updated(changedProperties) {
    if (changedProperties.has('open')) {
      if (this.open) {
        this.openDrawer();
      } else {
        this.closeDrawer();
      }
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.keydownEventHandler = this.handleKeydown.bind(this);
    window.addEventListener('keydown', this.keydownEventHandler);
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    window.removeEventListener('keydown', this.keydownEventHandler);
  }

  /**
   * @private
   * @returns {void}
   */
  openDrawer() {
    this.defaultTrigger = document.activeElement;

    setTimeout(() => {
      this.focus();

      this.handleFocusLoss();
    }, FOCUS_TIMEOUT);
  }

  /**
   * @private
   * @returns {void}
   */
  closeDrawer() {
    this.dispatchToggleEvent();
  }

  /**
   * @private
   * @returns {void}
   */
  dispatchToggleEvent() {
    // replace with Event constructor once IE support dropped
    const toggleEvent = document.createEvent("HTMLEvents");

    toggleEvent.initEvent("toggle", true, false);
    this.dispatchEvent(toggleEvent);
  }

  /**
   * @private
   * @returns {void} Determines if dropdown bib should be closed on focus change.
   */
  handleFocusLoss() {
    const focusable = [...this.querySelectorAll('button, auro-button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')];

    const firstFocusableElement = focusable[0];
    const lastFocusableElement = focusable[focusable.length - 1];

    const closeButton = this.shadowRoot.getElementById('drawer-close');

    if (lastFocusableElement) {
      lastFocusableElement.addEventListener('focusout', () => {
        if (closeButton !== null) {
          closeButton.focus();
        } else {
          firstFocusableElement.focus();
        }
      });
    }
  }

  /**
   * @private
   * @returns {void}
   */
  handleOverlayClick() {
    if (this.open && !this.modal) {
      this.handleCloseButtonClick();
    }
  }

  /**
   * @private
   * @returns {void}
   */
  handleCloseButtonClick() {
    this.open = false;
  }

  /**
   * @private
   * @param {KeyboardEvent} event - The keyboard event containing the key and keyCode.
   * @returns {void}
   */
  handleKeydown({ key, keyCode }) {
    if (this.open && !this.modal && (key === 'Escape' || keyCode === ESCAPE_KEYCODE)) {
      this.open = false;
    }
  }

  /**
   * Focus the drawer.
   * @private
   * @returns {void}
   */
  focus() {
    if (this.open) {
      this.drawer.focus();
    }
  }

  static get styles() {
    return [
      styleCss,
      styleUnformattedCss,
      colorCss,
      tokensCss
    ];
  }

  /**
   * @private
   * @returns {TemplateResult} - The close button template.
   */
  getCloseButton() {
    return this.modal
      ? html``
      : html`
        <${this.buttonTag} variant="flat" ?onDark=${this.hasAttribute('onDark')} class="drawer-header--action" id="drawer-close" @click="${this.handleCloseButtonClick}" part="close-button">
          <${this.iconTag} customSize customColor category="interface" name="x-lg"></${this.iconTag}>
          <span class="util_displayHiddenVisually">Close</span>
        </${this.buttonTag}>
      `;
  }

  render() {
    const classes = {
        'drawerOverlay': true,
        'drawerOverlay--modal': this.modal && this.open,
        'drawerOverlay--open': this.open,
        'util_displayHidden': !this.open
      },

      contentClasses = {
        'drawer': true,
        'drawer--open': this.open
      };

    return html`
      <div class="${classMap(classes)}" id="drawer-overlay" part="drawer-overlay" @click=${this.handleOverlayClick}></div>

      <div role="dialog" id="drawer" class="${classMap(contentClasses)}" part="drawer" aria-labelledby="drawer-header" tabindex="-1">
        ${this.unformatted
        ? html`
          <slot name="content"></slot>
          ${this.getCloseButton()}
        `
        : html`
          <div class="drawer-header" part="drawer-header">
            <h1 class="heading heading--700 util_stackMarginNone--top" id="drawer-header">
              <slot name="header">Default header ...</slot>
            </h1>
            ${this.getCloseButton()}
          </div>
          <div class="drawer-content" part="drawer-content">
            <slot name="content"></slot>
          </div>
          <div class="drawer-footer" id="footerWrapper" part="drawer-footer">
            <slot name="footer" id="footer"></slot>
          </div>
        `
      }
      </div>
    `;
  }
}

// Copyright (c) 2020 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


// See https://git.io/JJ6SJ for "How to document your components using JSDoc"
/**
 * @attr {Boolean} left - Sets drawer box to open from the left
 */

// build the component class
class AuroDrawer extends ComponentBase {
  // constructor() {
  //   super();
  // }

  // function to define props used within the scope of this component
  static get properties() {
    return {
      ...super.properties,
      // use custom accessors on base class
      open: {
        ...super.properties.open,
        noAccessor: true
      }
    };
  }

  static get styles() {
    return [
      super.styles,
      styleCss,
    ];
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-drawer"] - The name of element that you want to register to.
   *
   * @example
   * AuroDrawer.register("custom-drawer") // this will register this element to <custom-drawer/>
   *
   */
  static register(name = "auro-drawer") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroDrawer);
  }
}

AuroDrawer.register();

function initExamples(initCount) {
  initCount = initCount || 0;

  try {
    initBasicExample();
    initAccessibilityExample();
    initDecoupledExample();
    initEditCloseButtonExample();
    initModalExample();
    initPopoverAndDropdownExample();
    initSizeOptionsExample();
    initSlideOptionsExample();
  } catch (err) {
    if (initCount <= 20) {
      // setTimeout handles issue where content is sometimes loaded after the functions get called
      setTimeout(() => {
        initExamples(initCount + 1);
      }, 100);
    }
  }
}

export { initExamples };
